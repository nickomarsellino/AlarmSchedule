package com.example.nickomarsellino.scheduling;import android.Manifest;import android.annotation.SuppressLint;import android.app.AlarmManager;import android.app.DatePickerDialog;import android.app.PendingIntent;import android.app.TimePickerDialog;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.content.pm.PackageManager;import android.graphics.Typeface;import android.net.Uri;import android.os.Build;import android.support.design.widget.FloatingActionButton;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.view.Gravity;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.DatePicker;import android.widget.EditText;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.Spinner;import android.widget.TextView;import android.widget.TimePicker;import android.widget.Toast;import java.io.File;import java.util.ArrayList;import java.util.Calendar;import java.util.Iterator;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;public class Add_Schedule extends AppCompatActivity implements DatePickerDialog.OnDateSetListener, TimePickerDialog.OnTimeSetListener{    //untuk binding jadi    @BindView(R.id.container_gallery)    LinearLayout mContainerGallery;    //Untuk Notifikasi    int requestCode =0;    int flag=0;    //Inisialisasi Atribut input    EditText titleData, contentData, inputMinute;    Button saveButton;    Spinner spinReminder;    FloatingActionButton loadImage;    /////////////////////////////////////////////////////    private final static int REQ_PERMISSION = 1;    String realPath;    private Context mContext;    //Untuk Database nya    private ScheduleDBHelper dbHelper;    ////////////////////////////    //Untuk Munculin Calendar    TextView text_Calendar;    TextView text_Time;    Calendar mCurrentDate;    int day, month, year, hour, minute, remindTime;    int dayCurrent, monthCurrent, yearCurrent, hourCurrent, minuteCurrent;    int minuteFlag;    int hourFlag;    /////////////////////////////////////////////////////    //Untuk Notifikasi    public ScheduleClient scheduleClient;    ///////////////////////////////////////////////////////////    //String Builder Supay bisa nyimpan path gambar supaya banyak    StringBuilder sbPicture;    //////////////////////////////////////////////////////    //Supaya bisa simpen gambar lebih dari 1    private List<String> imgs = new ArrayList<String>();    //    //Create Button Delete lebih dari satu    private List<Button> delete_imgs = new ArrayList<Button>();    //    //Untuk SPinner Reminder    String Reminder [] = {"Hour", "Day", "Minute"};    ArrayAdapter<String> adapter;    String flagString;    //    String nameMonth [] = {"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"};    String monthName;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_add__schedule);        ButterKnife.bind(this);        //Insialisasi Untuk FOnt        Typeface typeFaceTitle = Typeface.createFromAsset(getAssets(), "Raleway-SemiBold.ttf");        Typeface typeFaceContent = Typeface.createFromAsset(getAssets(), "Raleway-Light.ttf");        Typeface typeFaceCalendar = Typeface.createFromAsset(getAssets(), "Raleway-LightItalic.ttf");        //////////////////////////////////        mCurrentDate = Calendar.getInstance();        //get current date and time for validation        dayCurrent = mCurrentDate.get(Calendar.DAY_OF_MONTH);        monthCurrent = mCurrentDate.get(Calendar.MONTH);        yearCurrent = mCurrentDate.get(Calendar.YEAR);        hourCurrent = mCurrentDate.get(Calendar.HOUR_OF_DAY);        minuteCurrent = mCurrentDate.get(Calendar.MINUTE);        //Inisialisasi Atribut input        titleData = findViewById(R.id.input_title);        contentData = findViewById(R.id.input_content);        saveButton = (Button) findViewById(R.id.button_save);        loadImage = (FloatingActionButton) findViewById(R.id.fab_create_image);        inputMinute = (EditText) findViewById(R.id.input_minute);        titleData.setTypeface(typeFaceTitle);        contentData.setTypeface(typeFaceContent);        spinReminder = (Spinner) findViewById(R.id.spinReminder);        adapter = new ArrayAdapter<String>(this, R.layout.support_simple_spinner_dropdown_item, Reminder);        spinReminder.setAdapter(adapter);        ///////////////////////////////////////////////////////////        sbPicture = new StringBuilder();        //Jika Tombol Add Image Di Tekan        loadImage.setOnClickListener(new View.OnClickListener() {            @SuppressLint("RestrictedApi")            @Override            public void onClick(View view) {                reqPermission();                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);                intent.setType("image/*");                startActivityForResult(intent, 0);            }        });        ///////////////////////////////////////////////////////////        //Untuk Calender        text_Calendar = (TextView) findViewById(R.id.input_reminder);        text_Time = (TextView) findViewById(R.id.input_time);        text_Calendar.setTypeface(typeFaceCalendar);        text_Time.setTypeface(typeFaceCalendar);        day = mCurrentDate.get(Calendar.DAY_OF_MONTH);        month = mCurrentDate.get(Calendar.MONTH);        year = mCurrentDate.get(Calendar.YEAR);        hour = mCurrentDate.get(Calendar.HOUR_OF_DAY);        minute = mCurrentDate.get(Calendar.MINUTE);//        text_Calendar.setText("Set Your openDatePicker");        monthName =  viewMonth(month);        text_Calendar.setText("Reminder For: "+day+"-"+monthName+"-"+year);        text_Time.setText("Time: "+hour+":"+minute);        ////////////////////////////////////////////////////////////////////////////////        //Untuk ngecek apakah spinnernya diilih atau tidak        spinReminder.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {            @Override            public void onItemSelected(AdapterView<?> adapterView, View view, int position, long id) {                switch (position)                {                    case 0:                        flagString = "hour";                        break;                    case 1:                        flagString = "day";                        break;                    case 2:                        flagString = "minute";                        break;                }            }            @Override            public void onNothingSelected(AdapterView<?> adapterView) {            }        });        saveButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                saveSchedule();            }        });    }    //Minta Permission Untuk akses ke gallery    public void reqPermission(){        int reqEX = ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE);        if(reqEX != PackageManager.PERMISSION_GRANTED){            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.READ_EXTERNAL_STORAGE}, REQ_PERMISSION);        }    }    ///////////////////////////////////////////////////////////////////    //Untuk Masukin Gambar ke Form    @Override    protected void onActivityResult(int reqCode, int resCode, Intent data) {        if(resCode == Add_Schedule.RESULT_OK && data != null){                // SDK >= 11 && SDK < 19            if (Build.VERSION.SDK_INT < 19)                realPath = RealPathUtil.getRealPathFromURI_API11to18(this, data.getData());                // SDK > 19 (Android 4.4)            else                realPath = RealPathUtil.getRealPathFromURI_API19(this, data.getData());            setImageViews(realPath);        }    }    private void setImageViews(final String realPath) {        final Uri uriFromPath = Uri.fromFile(new File(realPath));//        imageView.setImageURI(uriFromPath);        //supaya dia bisa generate lebih dari 1 gambar        final ImageView ivPicture = new ImageView(this);        final Button buttonImg = new Button(this);        buttonImg.setText("Delete Image");        LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT);        param.setMargins(0, 0, 0, 150);        final LinearLayout ContainerContent = new LinearLayout(this);        ContainerContent.setOrientation(LinearLayout.VERTICAL);        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(800, 500);        params.gravity = Gravity.CENTER;        LinearLayout.LayoutParams cancel = new LinearLayout.LayoutParams(600, 130);        cancel.gravity = Gravity.CENTER;        ivPicture.setLayoutParams(params);        ivPicture.setImageURI(uriFromPath);        buttonImg.setLayoutParams(cancel);        ContainerContent.addView(buttonImg);        ContainerContent.addView(ivPicture);        mContainerGallery.addView(ContainerContent, param);        //Pada saat "Delete Image" di tekan        buttonImg.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                Iterator<String> iterator = imgs.iterator();                while(iterator.hasNext())                {                    String value = iterator.next();                    if (realPath.equals(value))                    {                        ContainerContent.removeAllViewsInLayout();                        ContainerContent.removeAllViews();                        mContainerGallery.removeView(ContainerContent);                        iterator.remove();                        break;                    }                }            }        });        //Nyimpen Path Gambarnya ke image databasenya        imgs.add(realPath);        delete_imgs.add(buttonImg);    }    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    //Untuk Save Data Schedule        private void saveSchedule(){            String title = titleData.getText().toString().trim();            String content = contentData.getText().toString().trim();            String date =  String.valueOf(year)+"-"+ String.valueOf(month)+"-"+ String.valueOf(day);            String time = String.valueOf(hour)+":"+ String.valueOf(minute);            remindTime = Integer.parseInt(inputMinute.getText().toString().trim());            String reminder;            dbHelper = new ScheduleDBHelper(this);            if(title.isEmpty() && content.isEmpty()){                Toast.makeText(this, "You must enter the data", Toast.LENGTH_SHORT).show();            }            else{                if(flagString.equals("hour")){                    if(remindTime > 0 && remindTime < 24){                        reminder = remindTime + " hour";                        Schedule schedule = new Schedule(title, content, reminder ,date, time, imgs);                        long idSchedule = dbHelper.saveNewSchedule(schedule);                        //foreach untuk nyimpen datanya sesuai banyak yang dimasukin                        for(String img:schedule.getImages()){                            ScheduleImage scheduleImage = new ScheduleImage();                            scheduleImage.setIdSchedule(idSchedule);                            scheduleImage.setImage(img);                            dbHelper.saveNewScheduleImage(scheduleImage);                        }                        //                        Toast.makeText(this, "Input Sukses", Toast.LENGTH_SHORT).show();                        if(yearCurrent <= year && monthCurrent <= month && hourCurrent <= (hour-remindTime)){                            //Untuk masang Alarm dari inputan                            mCurrentDate.set(Calendar.DAY_OF_MONTH,day);                            mCurrentDate.set(Calendar.MONTH,month);                            mCurrentDate.set(Calendar.YEAR,year);                            mCurrentDate.set(Calendar.HOUR_OF_DAY,hour - remindTime);                            mCurrentDate.set(Calendar.MINUTE,minute);                            mCurrentDate.set(Calendar.SECOND,0);                            Intent intent = new Intent(this, MyAlarm.class);                            Bundle args = new Bundle();                            args.putParcelable(MyAlarm.EXTRA_SCHEDULE, schedule);                            intent.putExtra("a", args);                            PendingIntent pendingIntent = PendingIntent.getBroadcast(this, (int) idSchedule, intent, PendingIntent.FLAG_UPDATE_CURRENT);                            AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);                            alarmMgr.set(AlarmManager.RTC_WAKEUP,mCurrentDate.getTimeInMillis(), pendingIntent);                        }                        startActivity(new Intent(Add_Schedule.this, Home_Page.class));                    }                    else{                        Toast.makeText(this, "Please Change To Day", Toast.LENGTH_SHORT).show();                    }                }                else if (flagString.equals("day")){                    if(remindTime > 0) {                        reminder = remindTime + " day";                        Schedule schedule = new Schedule(title, content, reminder ,date, time, imgs);                        long idSchedule = dbHelper.saveNewSchedule(schedule);                        //foreach untuk nyimpen datanya sesuai banyak yang dimasukin                        for(String img:schedule.getImages()){                            ScheduleImage scheduleImage = new ScheduleImage();                            scheduleImage.setIdSchedule(idSchedule);                            scheduleImage.setImage(img);                            dbHelper.saveNewScheduleImage(scheduleImage);                        }                        //                        Toast.makeText(this, "Input Sukses", Toast.LENGTH_SHORT).show();                        if(yearCurrent <= year && monthCurrent <= month && dayCurrent <= (day-remindTime)) {                            //Untuk masang Alarm dari inputan                            mCurrentDate.set(Calendar.DAY_OF_MONTH, day - remindTime);                            mCurrentDate.set(Calendar.MONTH, month);                            mCurrentDate.set(Calendar.YEAR, year);                            mCurrentDate.set(Calendar.HOUR_OF_DAY, hour);                            mCurrentDate.set(Calendar.MINUTE, minute);                            mCurrentDate.set(Calendar.SECOND, 0);                            Intent intent = new Intent(this, MyAlarm.class);                            Bundle args = new Bundle();                            args.putParcelable(MyAlarm.EXTRA_SCHEDULE, schedule);                            intent.putExtra("a", args);                            PendingIntent pendingIntent = PendingIntent.getBroadcast(this, (int) idSchedule, intent, PendingIntent.FLAG_UPDATE_CURRENT);                            AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);                            alarmMgr.set(AlarmManager.RTC_WAKEUP,mCurrentDate.getTimeInMillis(), pendingIntent);                        }                        startActivity(new Intent(Add_Schedule.this, Home_Page.class));                    }                    else{                        Toast.makeText(this, "Please Change To Day", Toast.LENGTH_SHORT).show();                    }                }                else if (flagString.equals("minute")){                    if(remindTime > 0 && remindTime < 61) {                        reminder = remindTime + " minute";                        Schedule schedule = new Schedule(title, content, reminder ,date, time, imgs);                        long idSchedule = dbHelper.saveNewSchedule(schedule);                        //foreach untuk nyimpen datanya sesuai banyak yang dimasukin                        for(String img:schedule.getImages()){                            ScheduleImage scheduleImage = new ScheduleImage();                            scheduleImage.setIdSchedule(idSchedule);                            scheduleImage.setImage(img);                            dbHelper.saveNewScheduleImage(scheduleImage);                        }                        //                        Toast.makeText(this, "Input Sukses", Toast.LENGTH_SHORT).show();                        if(yearCurrent <= year && monthCurrent <= month && dayCurrent <= day) {                            minuteFlag = minute-remindTime;                            //Jika ia memilih minute tetapui di tangal yg sama                            if(dayCurrent == day){                                //jika hasil input menit bisa merubah jam                                if(minuteFlag < 0){                                    hourFlag = hour - 1;                                    minute = 60 + minuteFlag;                                    if(hourCurrent <= hourFlag){                                        if(minuteCurrent <= minute){                                            //Untuk masang Alarm dari inputan                                            mCurrentDate.set(Calendar.DAY_OF_MONTH, day);                                            mCurrentDate.set(Calendar.MONTH, month);                                            mCurrentDate.set(Calendar.YEAR, year);                                            mCurrentDate.set(Calendar.HOUR_OF_DAY, hourFlag);                                            mCurrentDate.set(Calendar.MINUTE, minute);                                            mCurrentDate.set(Calendar.SECOND, 0);                                            Intent intent = new Intent(this, MyAlarm.class);                                            Bundle args = new Bundle();                                            args.putParcelable(MyAlarm.EXTRA_SCHEDULE, schedule);                                            intent.putExtra("a", args);                                            PendingIntent pendingIntent = PendingIntent.getBroadcast(this, (int) idSchedule, intent, PendingIntent.FLAG_UPDATE_CURRENT);                                            AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);                                            alarmMgr.set(AlarmManager.RTC_WAKEUP,mCurrentDate.getTimeInMillis(), pendingIntent);                                        }                                    }                                }                                else{                                    if(hourCurrent <= hour){                                        if(minuteCurrent <= minuteFlag){                                            //Untuk masang Alarm dari inputan                                            mCurrentDate.set(Calendar.DAY_OF_MONTH, day);                                            mCurrentDate.set(Calendar.MONTH, month);                                            mCurrentDate.set(Calendar.YEAR, year);                                            mCurrentDate.set(Calendar.HOUR_OF_DAY, hour);                                            mCurrentDate.set(Calendar.MINUTE, minuteFlag);                                            mCurrentDate.set(Calendar.SECOND, 0);                                            Intent intent = new Intent(this, MyAlarm.class);                                            Bundle args = new Bundle();                                            args.putParcelable(MyAlarm.EXTRA_SCHEDULE, schedule);                                            intent.putExtra("a", args);                                            PendingIntent pendingIntent = PendingIntent.getBroadcast(this, (int) idSchedule, intent, PendingIntent.FLAG_UPDATE_CURRENT);                                            AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);                                            alarmMgr.set(AlarmManager.RTC_WAKEUP,mCurrentDate.getTimeInMillis(), pendingIntent);                                        }                                    }                                }                            }                            //Jika dia milih jam reminder di tanggal yang lebih lama dari hari                            else if(day > dayCurrent){                                if(minuteFlag < 0){                                    //Untuk Validasi itungan menit                                    hourFlag = hour - 1;                                    minute = 60 + minuteFlag;                                    //Untuk masang Alarm dari inputan                                    mCurrentDate.set(Calendar.DAY_OF_MONTH, day);                                    mCurrentDate.set(Calendar.MONTH, month);                                    mCurrentDate.set(Calendar.YEAR, year);                                    mCurrentDate.set(Calendar.HOUR_OF_DAY, hourFlag);                                    mCurrentDate.set(Calendar.MINUTE, minute);                                    mCurrentDate.set(Calendar.SECOND, 0);                                    Intent intent = new Intent(this, MyAlarm.class);                                    Bundle args = new Bundle();                                    args.putParcelable(MyAlarm.EXTRA_SCHEDULE, schedule);                                    intent.putExtra("a", args);                                    PendingIntent pendingIntent = PendingIntent.getBroadcast(this, (int) idSchedule, intent, PendingIntent.FLAG_UPDATE_CURRENT);                                    AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);                                    alarmMgr.set(AlarmManager.RTC_WAKEUP,mCurrentDate.getTimeInMillis(), pendingIntent);                                }                                else {                                    //Untuk masang Alarm dari inputan                                    mCurrentDate.set(Calendar.DAY_OF_MONTH, day);                                    mCurrentDate.set(Calendar.MONTH, month);                                    mCurrentDate.set(Calendar.YEAR, year);                                    mCurrentDate.set(Calendar.HOUR_OF_DAY, hour);                                    mCurrentDate.set(Calendar.MINUTE, minuteFlag);                                    mCurrentDate.set(Calendar.SECOND, 0);                                    Intent intent = new Intent(this, MyAlarm.class);                                    Bundle args = new Bundle();                                    args.putParcelable(MyAlarm.EXTRA_SCHEDULE, schedule);                                    intent.putExtra("a", args);                                    PendingIntent pendingIntent = PendingIntent.getBroadcast(this, (int) idSchedule, intent, PendingIntent.FLAG_UPDATE_CURRENT);                                    AlarmManager alarmMgr = (AlarmManager) getSystemService(Context.ALARM_SERVICE);                                    alarmMgr.set(AlarmManager.RTC_WAKEUP,mCurrentDate.getTimeInMillis(), pendingIntent);                                }                            }                        }                        finish();//                        startActivity(new Intent(Add_Schedule.this, Home_Page.class));                    }                    else{                        Toast.makeText(this, "Please Change To Hour", Toast.LENGTH_SHORT).show();                    }                }            }        }    /////////////////////////////////////////////////////////////////////////////////////////////    public void openDatePicker(View view) {        DatePickerDialog datePickerDialog = new DatePickerDialog(Add_Schedule.this, Add_Schedule.this, year, month, day);        datePickerDialog.show();    }    @Override    public void onDateSet(DatePicker datePicker, int year, int month, int day) {        this.year = year;        this.month = month;        this.day = day;        monthName =  viewMonth(month);        text_Calendar.setText("Reminder For: "+day+"-"+monthName+"-"+year);        TimePickerDialog timePickerDialog = new TimePickerDialog                (Add_Schedule.this, Add_Schedule.this,hour, minute, android.text.format.DateFormat.is24HourFormat(this));        timePickerDialog.show();    }    @Override    public void onTimeSet(TimePicker timePicker, int hour, int minute) {        this.hour = hour;        this.minute = minute;        text_Time.setText("Time: "+hour+":"+minute);    }    ///////////////////////////////////////////////////////////////////////////////////////////////////////////    public String viewMonth(int month){        String monthView = nameMonth[month];        return monthView;    }    @Override    public void onBackPressed() {        AlertDialog.Builder adbuilder = new AlertDialog.Builder(Add_Schedule.this);        adbuilder.setMessage("Do You Really Want To Exit ?")                .setCancelable(false)                .setPositiveButton("Save Change", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        saveSchedule();                    }                })                .setNegativeButton("Discard Change", new DialogInterface.OnClickListener() {                    @Override                    public void onClick(DialogInterface dialog, int which) {                        finish();                    }                })                .setTitle("WAIT");        adbuilder.show();    }}